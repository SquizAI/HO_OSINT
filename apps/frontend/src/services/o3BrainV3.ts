/**
 * O3 Brain V3 Service
 * Advanced AI orchestration and reasoning system
 */

interface O3Message {
  message: string;
  conversationHistory?: Array<{
    role: 'user' | 'assistant' | 'system';
    content: string;
  }>;
  userId?: string;
  onProgress?: (progress: number, stage: string, message?: string) => void;
  reasoningEffort?: 'low' | 'medium' | 'high';
  enableTools?: boolean;
}

interface O3Response {
  success: boolean;
  result?: {
    response_text?: string;
    analysis?: {
      situation?: string;
    };
    recommendations?: Array<{
      action: string;
      priority: 'High' | 'Medium' | 'Low';
      rationale?: string;
    }>;
    execution_plan?: {
      immediate_actions?: string[];
    };
    metrics?: {
      confidence?: number;
    };
  };
  metadata?: {
    reasoning_effort?: string;
    tokens_used?: number;
    processing_time?: number;
    model_used?: string;
  };
  error?: string;
}

class O3BrainV3Service {
  private baseUrl = 'https://hoea.netlify.app/.netlify/functions';
  private defaultModel = 'o3-balanced';

  async sendMessage(params: O3Message): Promise<O3Response> {
    const {
      message,
      conversationHistory = [],
      userId = 'default_user',
      onProgress,
      reasoningEffort = 'medium',
      enableTools = true
    } = params;

    try {
      // Call O3 Director for orchestration
      const response = await fetch(`${this.baseUrl}/api-o3-director`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          conversationHistory,
          researchContext: {
            entityId: userId,
            source: 'o3_brain_v3',
            reasoningEffort,
            enableTools
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`O3 Director failed: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || 'O3 Director returned error');
      }

      // Transform O3 Director response to O3Brain format
      const o3Response: O3Response = {
        success: true,
        result: {
          response_text: data.response,
          analysis: {
            situation: data.response
          },
          recommendations: data.insights?.map((insight: string, index: number) => ({
            action: insight,
            priority: index === 0 ? 'High' : index === 1 ? 'Medium' : 'Low' as const,
            rationale: `Generated by O3 Director orchestration`
          })) || [],
          execution_plan: {
            immediate_actions: data.nextSteps || []
          },
          metrics: {
            confidence: data.confidence || 0.85
          }
        },
        metadata: {
          reasoning_effort: reasoningEffort,
          tokens_used: 0, // O3 Director doesn't return token count
          processing_time: 0, // Could be calculated
          model_used: 'O3 Director'
        }
      };

      // Call progress callback if provided
      if (onProgress) {
        onProgress(100, 'Completed', 'O3 Director processing complete');
      }

      return o3Response;

    } catch (error) {
      console.error('O3 Brain V3 error:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error in O3 Brain V3',
        metadata: {
          reasoning_effort: reasoningEffort,
          model_used: 'error'
        }
      };
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/api-o3-director`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: 'test connection',
          conversationHistory: [],
          researchContext: {
            entityId: 'connection_test',
            source: 'o3_brain_test'
          }
        }),
      });

      return response.ok;
    } catch (error) {
      console.error('O3 Brain V3 connection test failed:', error);
      return false;
    }
  }

  getAvailableModels() {
    return [
      { id: 'o3-fast', name: 'O3 Fast', description: 'Quick responses with basic orchestration' },
      { id: 'o3-balanced', name: 'O3 Balanced', description: 'Balanced performance with multi-tool orchestration' },
      { id: 'o3-deep', name: 'O3 Deep', description: 'Deep reasoning with comprehensive research' },
      { id: 'o3-creative', name: 'O3 Creative', description: 'Creative problem solving with innovative approaches' },
    ];
  }

  getCurrentModel() {
    return this.defaultModel;
  }

  setModel(modelId: string) {
    this.defaultModel = modelId;
  }
}

// Export singleton instance
export const o3BrainV3 = new O3BrainV3Service();
export default o3BrainV3;